import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# Fonction pour extraire les heures à partir de la chaîne 'XXhYY'
def extract_hours(hour_string):
    try:
        return float(hour_string.split('h')[0])
    except:
        return None

def plot_clustered_data(filename, title, ax):
    # Charger les données depuis le fichier CSV en spécifiant le séparateur
    df = pd.read_csv(filename, sep=';')

    # Appliquer la fonction d'extraction sur la colonne 'Ensoleillement' pour obtenir les heures
    df['Station'] = df['Temperature moy.'].apply(extract_hours)

    # Exclure les lignes avec des valeurs manquantes
    df = df.dropna(subset=['Station'])

    # Réinitialiser l'index après avoir filtré les données
    df = df.reset_index(drop=True)

    # Exclure la colonne 'Ensoleillement'
    features = df[['Temperature moy.', 'Station']]

    # Spécifier le nombre de clusters que vous souhaitez
    num_clusters = 3

    # Ajouter l'argument `n_init` explicitement pour éviter l'avertissement
    kmeans = KMeans(n_clusters=num_clusters, n_init=10)  # Vous pouvez ajuster la valeur selon vos besoins

    # Appliquer l'algorithme K-means
    df['cluster'] = kmeans.fit_predict(features)

    # Visualisation des clusters
    ax.scatter(df['Temperature moy.'], df['Station'], c=df['cluster'], cmap='rainbow')
    ax.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='blue', marker='o', label='Centers')
    ax.set_title(title)
    ax.set_xlabel('Temperature Moyenne')
    ax.set_ylabel('Stations')


# Création de la figure et des sous-graphiques
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 12))

# Appel de la fonction pour tracer le premier graphique
plot_clustered_data('Janvier2023.csv', 'Comparatif du mois de janvier pour toutes les stations', axes[0, 0])

# Appel de la fonction pour tracer le deuxième graphique
plot_clustered_data('Avril2023.csv', 'Comparatif du mois d\'avril pour toutes les stations', axes[0, 1])

# Appel de la fonction pour tracer le troisième graphique
plot_clustered_data('Juillet2023.csv', 'Comparatif du mois de juillet pour toutes les stations', axes[1, 0])

# Appel de la fonction pour tracer le quatrième graphique
plot_clustered_data('Octobre2023.csv', 'Comparatif du mois d\'octobre pour toutes les stations', axes[1, 1])


# Création de la figure et des sous-graphiques
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 12))

# Appel de la fonction pour tracer le premier graphique
plot_clustered_data('Janvier2023.csv', 'Comparatif du mois de janvier pour toutes les stations', axes[0, 0])

# Appel de la fonction pour tracer le deuxième graphique
plot_clustered_data('Avril2023.csv', 'Comparatif du mois d\'avril pour toutes les stations', axes[0, 1])

# Appel de la fonction pour tracer le troisième graphique
plot_clustered_data('Juillet2023.csv', 'Comparatif du mois de juillet pour toutes les stations', axes[1, 0])

# Appel de la fonction pour tracer le quatrième graphique
plot_clustered_data('Octobre2023.csv', 'Comparatif du mois d\'octobre pour toutes les stations', axes[1, 1])

# Réduire la taille de la police des valeurs sur les axes x et y pour tous les sous-graphiques
for ax in axes.flatten():
    ax.tick_params(axis='x', labelsize=6)  # Taille de police de 8 pour les valeurs sur l'axe x
    ax.tick_params(axis='y', labelsize=9)  # Taille de police de 8 pour les valeurs sur l'axe y

plt.tight_layout()
plt.show()

plt.tight_layout()
plt.show()
